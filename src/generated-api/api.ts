/* tslint:disable */
/* eslint-disable */
/**
 * IquraStudyBE
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Answer
 */
export interface Answer {
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    'questionId'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Answer
     */
    'isCorrect'?: boolean;
    /**
     * 
     * @type {Question}
     * @memberof Answer
     */
    'question'?: Question;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name'?: string | null;
    /**
     * 
     * @type {Array<ProblemRelatedCategory>}
     * @memberof Category
     */
    'problemRelatedCategories'?: Array<ProblemRelatedCategory> | null;
}
/**
 * 
 * @export
 * @interface Competition
 */
export interface Competition {
    /**
     * 
     * @type {number}
     * @memberof Competition
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    'format'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    'participantMode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof Competition
     */
    'duration'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Competition
     */
    'difficulty'?: string | null;
    /**
     * 
     * @type {Array<CompetitionProblem>}
     * @memberof Competition
     */
    'competitionProblems'?: Array<CompetitionProblem> | null;
    /**
     * 
     * @type {Array<CompetitionQuiz>}
     * @memberof Competition
     */
    'competitionQuizzes'?: Array<CompetitionQuiz> | null;
}
/**
 * 
 * @export
 * @interface CompetitionDto
 */
export interface CompetitionDto {
    /**
     * 
     * @type {number}
     * @memberof CompetitionDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CompetitionDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompetitionDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompetitionDto
     */
    'format'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompetitionDto
     */
    'participantMode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CompetitionDto
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof CompetitionDto
     */
    'endTime'?: string;
    /**
     * 
     * @type {number}
     * @memberof CompetitionDto
     */
    'duration'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CompetitionDto
     */
    'difficulty'?: string | null;
    /**
     * 
     * @type {Array<ProblemDto>}
     * @memberof CompetitionDto
     */
    'problems'?: Array<ProblemDto> | null;
    /**
     * 
     * @type {number}
     * @memberof CompetitionDto
     */
    'problemsCount'?: number;
    /**
     * 
     * @type {Array<Quiz>}
     * @memberof CompetitionDto
     */
    'quizzes'?: Array<Quiz> | null;
    /**
     * 
     * @type {number}
     * @memberof CompetitionDto
     */
    'quizzesCount'?: number;
}
/**
 * 
 * @export
 * @interface CompetitionProblem
 */
export interface CompetitionProblem {
    /**
     * 
     * @type {number}
     * @memberof CompetitionProblem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CompetitionProblem
     */
    'competitionId'?: number;
    /**
     * 
     * @type {Competition}
     * @memberof CompetitionProblem
     */
    'competition'?: Competition;
    /**
     * 
     * @type {number}
     * @memberof CompetitionProblem
     */
    'problemId'?: number;
    /**
     * 
     * @type {Problem}
     * @memberof CompetitionProblem
     */
    'problem'?: Problem;
    /**
     * 
     * @type {number}
     * @memberof CompetitionProblem
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface CompetitionQuiz
 */
export interface CompetitionQuiz {
    /**
     * 
     * @type {number}
     * @memberof CompetitionQuiz
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CompetitionQuiz
     */
    'competitionId'?: number;
    /**
     * 
     * @type {Competition}
     * @memberof CompetitionQuiz
     */
    'competition'?: Competition;
    /**
     * 
     * @type {number}
     * @memberof CompetitionQuiz
     */
    'quizId'?: number;
    /**
     * 
     * @type {Quiz}
     * @memberof CompetitionQuiz
     */
    'quiz'?: Quiz;
    /**
     * 
     * @type {number}
     * @memberof CompetitionQuiz
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface CreateAnswerDto
 */
export interface CreateAnswerDto {
    /**
     * 
     * @type {string}
     * @memberof CreateAnswerDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CreateAnswerDto
     */
    'isCorrect'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateCompetitionProblemsDto
 */
export interface CreateCompetitionProblemsDto {
    /**
     * 
     * @type {number}
     * @memberof CreateCompetitionProblemsDto
     */
    'competitionId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateCompetitionProblemsDto
     */
    'quizIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateCompetitionProblemsDto
     */
    'problemIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface CreateGroupDTO
 */
export interface CreateGroupDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateGroupDTO
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateGroupTaskDTO
 */
export interface CreateGroupTaskDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateGroupTaskDTO
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateGroupTaskDTO
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CreateGroupTaskDTO
     */
    'groupId'?: number;
}
/**
 * 
 * @export
 * @interface CreateQuestionWithAnswersDto
 */
export interface CreateQuestionWithAnswersDto {
    /**
     * 
     * @type {string}
     * @memberof CreateQuestionWithAnswersDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {Array<CreateAnswerDto>}
     * @memberof CreateQuestionWithAnswersDto
     */
    'answers'?: Array<CreateAnswerDto> | null;
}
/**
 * 
 * @export
 * @interface CreateQuizDto
 */
export interface CreateQuizDto {
    /**
     * 
     * @type {string}
     * @memberof CreateQuizDto
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateQuizTaskDto
 */
export interface CreateQuizTaskDto {
    /**
     * 
     * @type {number}
     * @memberof CreateQuizTaskDto
     */
    'groupTasksId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateQuizTaskDto
     */
    'quizIds'?: Array<number> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateQuizTaskDto
     */
    'problemIds'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface GetGroupTaskQuiz
 */
export interface GetGroupTaskQuiz {
    /**
     * 
     * @type {number}
     * @memberof GetGroupTaskQuiz
     */
    'id'?: number;
    /**
     * 
     * @type {User}
     * @memberof GetGroupTaskQuiz
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {string}
     * @memberof GetGroupTaskQuiz
     */
    'createByUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GetGroupTaskQuiz
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetGroupTaskQuiz
     */
    'groupId'?: number | null;
    /**
     * 
     * @type {Array<GroupTaskQuizzesDto>}
     * @memberof GetGroupTaskQuiz
     */
    'groupTaskQuizzes'?: Array<GroupTaskQuizzesDto> | null;
    /**
     * 
     * @type {Array<GroupTaskProblemsDTO>}
     * @memberof GetGroupTaskQuiz
     */
    'groupTaskProblems'?: Array<GroupTaskProblemsDTO> | null;
    /**
     * 
     * @type {string}
     * @memberof GetGroupTaskQuiz
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GetGroupTaskQuiz
     */
    'averageScore'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GetGroupTaskQuiz
     */
    'createdAt'?: string | null;
}
/**
 * 
 * @export
 * @interface Grade
 */
export interface Grade {
    /**
     * 
     * @type {number}
     * @memberof Grade
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Grade
     */
    'problemId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Grade
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Grade
     */
    'gradeScore'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Grade
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {Problem}
     * @memberof Grade
     */
    'problem'?: Problem;
    /**
     * 
     * @type {User}
     * @memberof Grade
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'createdByUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Group
     */
    'isArchived'?: boolean | null;
    /**
     * 
     * @type {User}
     * @memberof Group
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {Array<GroupPerson>}
     * @memberof Group
     */
    'groupPeople'?: Array<GroupPerson> | null;
    /**
     * 
     * @type {Array<GroupTask>}
     * @memberof Group
     */
    'groupTasks'?: Array<GroupTask> | null;
}
/**
 * 
 * @export
 * @interface GroupPerson
 */
export interface GroupPerson {
    /**
     * 
     * @type {number}
     * @memberof GroupPerson
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GroupPerson
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GroupPerson
     */
    'groupId'?: number | null;
    /**
     * 
     * @type {UserStatus}
     * @memberof GroupPerson
     */
    'userStatus'?: UserStatus;
    /**
     * 
     * @type {Group}
     * @memberof GroupPerson
     */
    'group'?: Group;
    /**
     * 
     * @type {User}
     * @memberof GroupPerson
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof GroupPerson
     */
    'createdAt'?: string | null;
}


/**
 * 
 * @export
 * @interface GroupTask
 */
export interface GroupTask {
    /**
     * 
     * @type {number}
     * @memberof GroupTask
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GroupTask
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupTask
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof GroupTask
     */
    'groupId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GroupTask
     */
    'createByUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupTask
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {Group}
     * @memberof GroupTask
     */
    'group'?: Group;
    /**
     * 
     * @type {User}
     * @memberof GroupTask
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {Array<GroupTaskProblem>}
     * @memberof GroupTask
     */
    'groupTaskProblems'?: Array<GroupTaskProblem> | null;
    /**
     * 
     * @type {Array<GroupTaskQuiz>}
     * @memberof GroupTask
     */
    'groupTaskQuizzes'?: Array<GroupTaskQuiz> | null;
    /**
     * 
     * @type {Array<QuizSubmittion>}
     * @memberof GroupTask
     */
    'quizSubmittions'?: Array<QuizSubmittion> | null;
    /**
     * 
     * @type {Array<ProblemSubmittion>}
     * @memberof GroupTask
     */
    'problemSubmittions'?: Array<ProblemSubmittion> | null;
}
/**
 * 
 * @export
 * @interface GroupTaskProblem
 */
export interface GroupTaskProblem {
    /**
     * 
     * @type {number}
     * @memberof GroupTaskProblem
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskProblem
     */
    'groupTaskId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskProblem
     */
    'problemId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof GroupTaskProblem
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {GroupTask}
     * @memberof GroupTaskProblem
     */
    'groupTask'?: GroupTask;
    /**
     * 
     * @type {Problem}
     * @memberof GroupTaskProblem
     */
    'problem'?: Problem;
}
/**
 * 
 * @export
 * @interface GroupTaskProblemsDTO
 */
export interface GroupTaskProblemsDTO {
    /**
     * 
     * @type {number}
     * @memberof GroupTaskProblemsDTO
     */
    'groupTaskId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskProblemsDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskProblemsDTO
     */
    'problemId'?: number | null;
    /**
     * 
     * @type {Problem}
     * @memberof GroupTaskProblemsDTO
     */
    'problem'?: Problem;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskProblemsDTO
     */
    'score'?: number | null;
}
/**
 * 
 * @export
 * @interface GroupTaskQuiz
 */
export interface GroupTaskQuiz {
    /**
     * 
     * @type {number}
     * @memberof GroupTaskQuiz
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskQuiz
     */
    'groupTaskId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskQuiz
     */
    'quizId'?: number;
    /**
     * 
     * @type {GroupTask}
     * @memberof GroupTaskQuiz
     */
    'groupTask'?: GroupTask;
    /**
     * 
     * @type {Quiz}
     * @memberof GroupTaskQuiz
     */
    'quiz'?: Quiz;
    /**
     * 
     * @type {string}
     * @memberof GroupTaskQuiz
     */
    'createdAt'?: string | null;
}
/**
 * 
 * @export
 * @interface GroupTaskQuizzesDto
 */
export interface GroupTaskQuizzesDto {
    /**
     * 
     * @type {number}
     * @memberof GroupTaskQuizzesDto
     */
    'groupTaskId'?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskQuizzesDto
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskQuizzesDto
     */
    'quizId'?: number;
    /**
     * 
     * @type {Quiz}
     * @memberof GroupTaskQuizzesDto
     */
    'quiz'?: Quiz;
    /**
     * 
     * @type {number}
     * @memberof GroupTaskQuizzesDto
     */
    'score'?: number | null;
}
/**
 * 
 * @export
 * @interface LoginViewModel
 */
export interface LoginViewModel {
    /**
     * 
     * @type {string}
     * @memberof LoginViewModel
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginViewModel
     */
    'password': string;
    /**
     * 
     * @type {boolean}
     * @memberof LoginViewModel
     */
    'rememberMe'?: boolean | null;
}
/**
 * 
 * @export
 * @interface Participation
 */
export interface Participation {
    /**
     * 
     * @type {number}
     * @memberof Participation
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Participation
     */
    'competitionId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Participation
     */
    'startedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Participation
     */
    'endedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Participation
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof Participation
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof Participation
     */
    'userId'?: string | null;
    /**
     * 
     * @type {User}
     * @memberof Participation
     */
    'user'?: User;
    /**
     * 
     * @type {Competition}
     * @memberof Participation
     */
    'competition'?: Competition;
}
/**
 * 
 * @export
 * @interface PostProblemSubmittionDTO
 */
export interface PostProblemSubmittionDTO {
    /**
     * 
     * @type {string}
     * @memberof PostProblemSubmittionDTO
     */
    'sourceCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PostProblemSubmittionDTO
     */
    'score'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostProblemSubmittionDTO
     */
    'groupTaskId'?: number;
    /**
     * 
     * @type {number}
     * @memberof PostProblemSubmittionDTO
     */
    'problemId'?: number;
}
/**
 * 
 * @export
 * @interface Problem
 */
export interface Problem {
    /**
     * 
     * @type {number}
     * @memberof Problem
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'initFunc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'userId'?: string | null;
    /**
     * 
     * @type {User}
     * @memberof Problem
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Problem
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<Grade>}
     * @memberof Problem
     */
    'grades'?: Array<Grade> | null;
    /**
     * 
     * @type {Array<GroupTaskProblem>}
     * @memberof Problem
     */
    'groupTaskProblems'?: Array<GroupTaskProblem> | null;
    /**
     * 
     * @type {Array<ProblemRelatedCategory>}
     * @memberof Problem
     */
    'problemRelatedCategories'?: Array<ProblemRelatedCategory> | null;
    /**
     * 
     * @type {Array<TestCase>}
     * @memberof Problem
     */
    'testCases'?: Array<TestCase> | null;
    /**
     * 
     * @type {Array<CompetitionProblem>}
     * @memberof Problem
     */
    'competitionProblems'?: Array<CompetitionProblem> | null;
}
/**
 * 
 * @export
 * @interface ProblemDto
 */
export interface ProblemDto {
    /**
     * 
     * @type {number}
     * @memberof ProblemDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDto
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface ProblemRelatedCategory
 */
export interface ProblemRelatedCategory {
    /**
     * 
     * @type {number}
     * @memberof ProblemRelatedCategory
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProblemRelatedCategory
     */
    'problemId'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemRelatedCategory
     */
    'categoryId'?: number | null;
    /**
     * 
     * @type {Category}
     * @memberof ProblemRelatedCategory
     */
    'category'?: Category;
    /**
     * 
     * @type {Problem}
     * @memberof ProblemRelatedCategory
     */
    'problem'?: Problem;
    /**
     * 
     * @type {string}
     * @memberof ProblemRelatedCategory
     */
    'createdAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ProblemScoreDto
 */
export interface ProblemScoreDto {
    /**
     * 
     * @type {number}
     * @memberof ProblemScoreDto
     */
    'problemId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemScoreDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemScoreDto
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface ProblemSubmittion
 */
export interface ProblemSubmittion {
    /**
     * 
     * @type {number}
     * @memberof ProblemSubmittion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemSubmittion
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemSubmittion
     */
    'problemId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemSubmittion
     */
    'sourceCode'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemSubmittion
     */
    'groupTaskId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ProblemSubmittion
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemSubmittion
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {User}
     * @memberof ProblemSubmittion
     */
    'user'?: User;
    /**
     * 
     * @type {Problem}
     * @memberof ProblemSubmittion
     */
    'problem'?: Problem;
    /**
     * 
     * @type {GroupTask}
     * @memberof ProblemSubmittion
     */
    'groupTask'?: GroupTask;
}
/**
 * 
 * @export
 * @interface ProblemViewModel
 */
export interface ProblemViewModel {
    /**
     * 
     * @type {string}
     * @memberof ProblemViewModel
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemViewModel
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemViewModel
     */
    'initFunc'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemViewModel
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemViewModel
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Array<TestCase>}
     * @memberof ProblemViewModel
     */
    'testCases'?: Array<TestCase> | null;
}
/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    'quizId'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Question
     */
    'isMultiSelect'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {Quiz}
     * @memberof Question
     */
    'quiz'?: Quiz;
    /**
     * 
     * @type {Array<Answer>}
     * @memberof Question
     */
    'answers'?: Array<Answer> | null;
}
/**
 * 
 * @export
 * @interface QuestionAnswer
 */
export interface QuestionAnswer {
    /**
     * 
     * @type {number}
     * @memberof QuestionAnswer
     */
    'questionId'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof QuestionAnswer
     */
    'answers'?: Array<number> | null;
}
/**
 * 
 * @export
 * @interface Quiz
 */
export interface Quiz {
    /**
     * 
     * @type {number}
     * @memberof Quiz
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'createdByUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Quiz
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {User}
     * @memberof Quiz
     */
    'createdByUser'?: User;
    /**
     * 
     * @type {Array<Question>}
     * @memberof Quiz
     */
    'questions'?: Array<Question> | null;
}
/**
 * 
 * @export
 * @interface QuizScoreDto
 */
export interface QuizScoreDto {
    /**
     * 
     * @type {number}
     * @memberof QuizScoreDto
     */
    'quizId'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizScoreDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof QuizScoreDto
     */
    'score'?: number;
}
/**
 * 
 * @export
 * @interface QuizSubmittion
 */
export interface QuizSubmittion {
    /**
     * 
     * @type {number}
     * @memberof QuizSubmittion
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizSubmittion
     */
    'userId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof QuizSubmittion
     */
    'quizId'?: number;
    /**
     * 
     * @type {number}
     * @memberof QuizSubmittion
     */
    'groupTaskId'?: number;
    /**
     * 
     * @type {number}
     * @memberof QuizSubmittion
     */
    'score'?: number;
    /**
     * 
     * @type {string}
     * @memberof QuizSubmittion
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {User}
     * @memberof QuizSubmittion
     */
    'user'?: User;
    /**
     * 
     * @type {Quiz}
     * @memberof QuizSubmittion
     */
    'quiz'?: Quiz;
    /**
     * 
     * @type {GroupTask}
     * @memberof QuizSubmittion
     */
    'groupTask'?: GroupTask;
}
/**
 * 
 * @export
 * @interface QuizVerificationRequest
 */
export interface QuizVerificationRequest {
    /**
     * 
     * @type {number}
     * @memberof QuizVerificationRequest
     */
    'quizId'?: number;
    /**
     * 
     * @type {number}
     * @memberof QuizVerificationRequest
     */
    'taskId'?: number;
    /**
     * 
     * @type {Array<QuestionAnswer>}
     * @memberof QuizVerificationRequest
     */
    'questions'?: Array<QuestionAnswer> | null;
}
/**
 * 
 * @export
 * @interface RegisterViewModel
 */
export interface RegisterViewModel {
    /**
     * 
     * @type {string}
     * @memberof RegisterViewModel
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterViewModel
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterViewModel
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterViewModel
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ScoreboardDto
 */
export interface ScoreboardDto {
    /**
     * 
     * @type {string}
     * @memberof ScoreboardDto
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScoreboardDto
     */
    'userName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScoreboardDto
     */
    'totalScore'?: number;
    /**
     * 
     * @type {Array<ProblemScoreDto>}
     * @memberof ScoreboardDto
     */
    'problems'?: Array<ProblemScoreDto> | null;
    /**
     * 
     * @type {Array<QuizScoreDto>}
     * @memberof ScoreboardDto
     */
    'quizzes'?: Array<QuizScoreDto> | null;
}
/**
 * 
 * @export
 * @interface TestCase
 */
export interface TestCase {
    /**
     * 
     * @type {number}
     * @memberof TestCase
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TestCase
     */
    'problemId'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TestCase
     */
    'input'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TestCase
     */
    'expectedResult'?: string | null;
    /**
     * 
     * @type {Problem}
     * @memberof TestCase
     */
    'problem'?: Problem;
}
/**
 * 
 * @export
 * @interface TokenModel
 */
export interface TokenModel {
    /**
     * 
     * @type {string}
     * @memberof TokenModel
     */
    'accessToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TokenModel
     */
    'refreshToken'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateQuizTitle
 */
export interface UpdateQuizTitle {
    /**
     * 
     * @type {string}
     * @memberof UpdateQuizTitle
     */
    'title'?: string | null;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'normalizedUserName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'normalizedEmail'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'emailConfirmed'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'passwordHash'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'securityStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'concurrencyStamp'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'phoneNumber'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'phoneNumberConfirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'twoFactorEnabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lockoutEnd'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'lockoutEnabled'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'accessFailedCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'refreshToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'refreshTokenExpiryTime'?: string;
    /**
     * 
     * @type {Array<Grade>}
     * @memberof User
     */
    'grades'?: Array<Grade> | null;
    /**
     * 
     * @type {Array<GroupPerson>}
     * @memberof User
     */
    'groupPeople'?: Array<GroupPerson> | null;
    /**
     * 
     * @type {Array<Group>}
     * @memberof User
     */
    'groups'?: Array<Group> | null;
    /**
     * 
     * @type {Array<GroupTask>}
     * @memberof User
     */
    'groupTasks'?: Array<GroupTask> | null;
    /**
     * 
     * @type {Array<Problem>}
     * @memberof User
     */
    'problems'?: Array<Problem> | null;
    /**
     * 
     * @type {Array<Quiz>}
     * @memberof User
     */
    'quizzes'?: Array<Quiz> | null;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'role'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'createdAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    'updatedAt'?: string | null;
}
/**
 * 
 * @export
 * @enum {number}
 */

export const UserStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type UserStatus = typeof UserStatus[keyof typeof UserStatus];



/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Account/GetMe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginViewModel} [loginViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost: async (loginViewModel?: LoginViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Account/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterViewModel} [registerViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegisterPost: async (registerViewModel?: RegisterViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Account/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountGetMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountGetMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountGetMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginViewModel} [loginViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountLoginPost(loginViewModel?: LoginViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountLoginPost(loginViewModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterViewModel} [registerViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountRegisterPost(registerViewModel?: RegisterViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountRegisterPost(registerViewModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.apiAccountRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountGetMeGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountGetMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginViewModel} [loginViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost(loginViewModel?: LoginViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountLoginPost(loginViewModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterViewModel} [registerViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegisterPost(registerViewModel?: RegisterViewModel, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAccountRegisterPost(registerViewModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountGetMeGet(options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountGetMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginViewModel} [loginViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountLoginPost(loginViewModel?: LoginViewModel, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountLoginPost(loginViewModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterViewModel} [registerViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountRegisterPost(registerViewModel?: RegisterViewModel, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountRegisterPost(registerViewModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AnswerApi - axios parameter creator
 * @export
 */
export const AnswerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAnswerIdDelete', 'id', id)
            const localVarPath = `/api/Answer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAnswerIdGet', 'id', id)
            const localVarPath = `/api/Answer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Answer} [answer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerIdPut: async (id: number, answer?: Answer, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAnswerIdPut', 'id', id)
            const localVarPath = `/api/Answer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(answer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} questionId 
         * @param {Array<CreateAnswerDto>} [createAnswerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerQuestionIdPost: async (questionId: number, createAnswerDto?: Array<CreateAnswerDto>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('apiAnswerQuestionIdPost', 'questionId', questionId)
            const localVarPath = `/api/Answer/{QuestionId}`
                .replace(`{${"QuestionId"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAnswerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnswerApi - functional programming interface
 * @export
 */
export const AnswerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AnswerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnswerGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Answer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAnswerGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnswerApi.apiAnswerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnswerIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAnswerIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnswerApi.apiAnswerIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnswerIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Answer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAnswerIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnswerApi.apiAnswerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Answer} [answer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnswerIdPut(id: number, answer?: Answer, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAnswerIdPut(id, answer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnswerApi.apiAnswerIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} questionId 
         * @param {Array<CreateAnswerDto>} [createAnswerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAnswerQuestionIdPost(questionId: number, createAnswerDto?: Array<CreateAnswerDto>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Answer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAnswerQuestionIdPost(questionId, createAnswerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AnswerApi.apiAnswerQuestionIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AnswerApi - factory interface
 * @export
 */
export const AnswerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AnswerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Answer>> {
            return localVarFp.apiAnswerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAnswerIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Answer> {
            return localVarFp.apiAnswerIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Answer} [answer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerIdPut(id: number, answer?: Answer, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAnswerIdPut(id, answer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} questionId 
         * @param {Array<CreateAnswerDto>} [createAnswerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAnswerQuestionIdPost(questionId: number, createAnswerDto?: Array<CreateAnswerDto>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Answer>> {
            return localVarFp.apiAnswerQuestionIdPost(questionId, createAnswerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AnswerApi - object-oriented interface
 * @export
 * @class AnswerApi
 * @extends {BaseAPI}
 */
export class AnswerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerApi
     */
    public apiAnswerGet(options?: RawAxiosRequestConfig) {
        return AnswerApiFp(this.configuration).apiAnswerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerApi
     */
    public apiAnswerIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return AnswerApiFp(this.configuration).apiAnswerIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerApi
     */
    public apiAnswerIdGet(id: number, options?: RawAxiosRequestConfig) {
        return AnswerApiFp(this.configuration).apiAnswerIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Answer} [answer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerApi
     */
    public apiAnswerIdPut(id: number, answer?: Answer, options?: RawAxiosRequestConfig) {
        return AnswerApiFp(this.configuration).apiAnswerIdPut(id, answer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} questionId 
     * @param {Array<CreateAnswerDto>} [createAnswerDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerApi
     */
    public apiAnswerQuestionIdPost(questionId: number, createAnswerDto?: Array<CreateAnswerDto>, options?: RawAxiosRequestConfig) {
        return AnswerApiFp(this.configuration).apiAnswerQuestionIdPost(questionId, createAnswerDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCategoryIdDelete', 'id', id)
            const localVarPath = `/api/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdPut: async (id: number, body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCategoryIdPut', 'id', id)
            const localVarPath = `/api/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryPost: async (body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('get', 'id', id)
            const localVarPath = `/api/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryIdPut(id: number, body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryIdPut(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCategoryPost(body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCategoryPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.apiCategoryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoryApi.get']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.apiCategoryGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCategoryIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryIdPut(id: number, body?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCategoryIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCategoryPost(body?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCategoryPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(id: number, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.get(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryGet(options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryIdPut(id: number, body?: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public apiCategoryPost(body?: string, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).apiCategoryPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryApi
     */
    public get(id: number, options?: RawAxiosRequestConfig) {
        return CategoryApiFp(this.configuration).get(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CompetitionApi - axios parameter creator
 * @export
 */
export const CompetitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Competition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCompetitionIdDelete', 'id', id)
            const localVarPath = `/api/Competition/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCompetitionIdGet', 'id', id)
            const localVarPath = `/api/Competition/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Competition} [competition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionIdPut: async (id: number, competition?: Competition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCompetitionIdPut', 'id', id)
            const localVarPath = `/api/Competition/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(competition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Competition} [competition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionPost: async (competition?: Competition, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Competition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(competition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCompetitionProblemsDto} [createCompetitionProblemsDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionProblemsPost: async (createCompetitionProblemsDto?: CreateCompetitionProblemsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Competition/Problems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCompetitionProblemsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} competitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionScoreboardCompetitionIdGet: async (competitionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('apiCompetitionScoreboardCompetitionIdGet', 'competitionId', competitionId)
            const localVarPath = `/api/Competition/Scoreboard/{competitionId}`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompetitionApi - functional programming interface
 * @export
 */
export const CompetitionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompetitionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCompetitionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Competition>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCompetitionGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitionApi.apiCompetitionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCompetitionIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCompetitionIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitionApi.apiCompetitionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCompetitionIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompetitionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCompetitionIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitionApi.apiCompetitionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Competition} [competition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCompetitionIdPut(id: number, competition?: Competition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCompetitionIdPut(id, competition, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitionApi.apiCompetitionIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Competition} [competition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCompetitionPost(competition?: Competition, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Competition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCompetitionPost(competition, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitionApi.apiCompetitionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCompetitionProblemsDto} [createCompetitionProblemsDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCompetitionProblemsPost(createCompetitionProblemsDto?: CreateCompetitionProblemsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCompetitionProblemsPost(createCompetitionProblemsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitionApi.apiCompetitionProblemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} competitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCompetitionScoreboardCompetitionIdGet(competitionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScoreboardDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCompetitionScoreboardCompetitionIdGet(competitionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CompetitionApi.apiCompetitionScoreboardCompetitionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CompetitionApi - factory interface
 * @export
 */
export const CompetitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompetitionApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Competition>> {
            return localVarFp.apiCompetitionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCompetitionIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<CompetitionDto> {
            return localVarFp.apiCompetitionIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Competition} [competition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionIdPut(id: number, competition?: Competition, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCompetitionIdPut(id, competition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Competition} [competition] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionPost(competition?: Competition, options?: RawAxiosRequestConfig): AxiosPromise<Competition> {
            return localVarFp.apiCompetitionPost(competition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCompetitionProblemsDto} [createCompetitionProblemsDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionProblemsPost(createCompetitionProblemsDto?: CreateCompetitionProblemsDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiCompetitionProblemsPost(createCompetitionProblemsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} competitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCompetitionScoreboardCompetitionIdGet(competitionId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ScoreboardDto>> {
            return localVarFp.apiCompetitionScoreboardCompetitionIdGet(competitionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompetitionApi - object-oriented interface
 * @export
 * @class CompetitionApi
 * @extends {BaseAPI}
 */
export class CompetitionApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionApi
     */
    public apiCompetitionGet(options?: RawAxiosRequestConfig) {
        return CompetitionApiFp(this.configuration).apiCompetitionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionApi
     */
    public apiCompetitionIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return CompetitionApiFp(this.configuration).apiCompetitionIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionApi
     */
    public apiCompetitionIdGet(id: number, options?: RawAxiosRequestConfig) {
        return CompetitionApiFp(this.configuration).apiCompetitionIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Competition} [competition] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionApi
     */
    public apiCompetitionIdPut(id: number, competition?: Competition, options?: RawAxiosRequestConfig) {
        return CompetitionApiFp(this.configuration).apiCompetitionIdPut(id, competition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Competition} [competition] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionApi
     */
    public apiCompetitionPost(competition?: Competition, options?: RawAxiosRequestConfig) {
        return CompetitionApiFp(this.configuration).apiCompetitionPost(competition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCompetitionProblemsDto} [createCompetitionProblemsDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionApi
     */
    public apiCompetitionProblemsPost(createCompetitionProblemsDto?: CreateCompetitionProblemsDto, options?: RawAxiosRequestConfig) {
        return CompetitionApiFp(this.configuration).apiCompetitionProblemsPost(createCompetitionProblemsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} competitionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionApi
     */
    public apiCompetitionScoreboardCompetitionIdGet(competitionId: number, options?: RawAxiosRequestConfig) {
        return CompetitionApiFp(this.configuration).apiCompetitionScoreboardCompetitionIdGet(competitionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupCheckInvitationIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupCheckInvitationIdGet', 'id', id)
            const localVarPath = `/api/Group/CheckInvitation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [myGroups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupGet: async (myGroups?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (myGroups !== undefined) {
                localVarQueryParameter['myGroups'] = myGroups;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupIdDelete', 'id', id)
            const localVarPath = `/api/Group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupIdGet', 'id', id)
            const localVarPath = `/api/Group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {CreateGroupDTO} [createGroupDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupIdPatch: async (id: number, createGroupDTO?: CreateGroupDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupIdPatch', 'id', id)
            const localVarPath = `/api/Group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupIdPut: async (id: number, group?: Group, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupIdPut', 'id', id)
            const localVarPath = `/api/Group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateGroupDTO} [createGroupDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPost: async (createGroupDTO?: CreateGroupDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupCheckInvitationIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupCheckInvitationIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.apiGroupCheckInvitationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [myGroups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupGet(myGroups?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupGet(myGroups, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.apiGroupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.apiGroupIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.apiGroupIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {CreateGroupDTO} [createGroupDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupIdPatch(id: number, createGroupDTO?: CreateGroupDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupIdPatch(id, createGroupDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.apiGroupIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupIdPut(id: number, group?: Group, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupIdPut(id, group, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.apiGroupIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateGroupDTO} [createGroupDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupPost(createGroupDTO?: CreateGroupDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupPost(createGroupDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.apiGroupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupCheckInvitationIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
            return localVarFp.apiGroupCheckInvitationIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [myGroups] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupGet(myGroups?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<Group>> {
            return localVarFp.apiGroupGet(myGroups, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiGroupIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
            return localVarFp.apiGroupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {CreateGroupDTO} [createGroupDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupIdPatch(id: number, createGroupDTO?: CreateGroupDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiGroupIdPatch(id, createGroupDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupIdPut(id: number, group?: Group, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiGroupIdPut(id, group, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateGroupDTO} [createGroupDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPost(createGroupDTO?: CreateGroupDTO, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
            return localVarFp.apiGroupPost(createGroupDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public apiGroupCheckInvitationIdGet(id: number, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).apiGroupCheckInvitationIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [myGroups] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public apiGroupGet(myGroups?: boolean, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).apiGroupGet(myGroups, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public apiGroupIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).apiGroupIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public apiGroupIdGet(id: number, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).apiGroupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {CreateGroupDTO} [createGroupDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public apiGroupIdPatch(id: number, createGroupDTO?: CreateGroupDTO, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).apiGroupIdPatch(id, createGroupDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Group} [group] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public apiGroupIdPut(id: number, group?: Group, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).apiGroupIdPut(id, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateGroupDTO} [createGroupDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public apiGroupPost(createGroupDTO?: CreateGroupDTO, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).apiGroupPost(createGroupDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GroupPersonApi - axios parameter creator
 * @export
 */
export const GroupPersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GroupPerson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupPersonIdDelete', 'id', id)
            const localVarPath = `/api/GroupPerson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupPersonIdGet', 'id', id)
            const localVarPath = `/api/GroupPerson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonIdPut: async (id: number, body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiGroupPersonIdPut', 'id', id)
            const localVarPath = `/api/GroupPerson/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonPost: async (body?: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/GroupPerson`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupPersonApi - functional programming interface
 * @export
 */
export const GroupPersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupPersonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupPersonGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupPerson>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupPersonGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupPersonApi.apiGroupPersonGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupPersonIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupPersonIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupPersonApi.apiGroupPersonIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupPersonIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupPerson>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupPersonIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupPersonApi.apiGroupPersonIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupPersonIdPut(id: number, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupPersonIdPut(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupPersonApi.apiGroupPersonIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupPersonPost(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPerson>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGroupPersonPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupPersonApi.apiGroupPersonPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupPersonApi - factory interface
 * @export
 */
export const GroupPersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupPersonApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<GroupPerson>> {
            return localVarFp.apiGroupPersonGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiGroupPersonIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<GroupPerson>> {
            return localVarFp.apiGroupPersonIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonIdPut(id: number, body?: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiGroupPersonIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPersonPost(body?: object, options?: RawAxiosRequestConfig): AxiosPromise<GroupPerson> {
            return localVarFp.apiGroupPersonPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupPersonApi - object-oriented interface
 * @export
 * @class GroupPersonApi
 * @extends {BaseAPI}
 */
export class GroupPersonApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPersonApi
     */
    public apiGroupPersonGet(options?: RawAxiosRequestConfig) {
        return GroupPersonApiFp(this.configuration).apiGroupPersonGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPersonApi
     */
    public apiGroupPersonIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return GroupPersonApiFp(this.configuration).apiGroupPersonIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPersonApi
     */
    public apiGroupPersonIdGet(id: number, options?: RawAxiosRequestConfig) {
        return GroupPersonApiFp(this.configuration).apiGroupPersonIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPersonApi
     */
    public apiGroupPersonIdPut(id: number, body?: object, options?: RawAxiosRequestConfig) {
        return GroupPersonApiFp(this.configuration).apiGroupPersonIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupPersonApi
     */
    public apiGroupPersonPost(body?: object, options?: RawAxiosRequestConfig) {
        return GroupPersonApiFp(this.configuration).apiGroupPersonPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ParicipationApi - axios parameter creator
 * @export
 */
export const ParicipationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} competitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiParicipationCompetitionIdGet: async (competitionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'competitionId' is not null or undefined
            assertParamExists('apiParicipationCompetitionIdGet', 'competitionId', competitionId)
            const localVarPath = `/api/Paricipation/{competitionId}`
                .replace(`{${"competitionId"}}`, encodeURIComponent(String(competitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiParicipationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Paricipation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiParicipationPost: async (body?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Paricipation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParicipationApi - functional programming interface
 * @export
 */
export const ParicipationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ParicipationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} competitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiParicipationCompetitionIdGet(competitionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Participation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiParicipationCompetitionIdGet(competitionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParicipationApi.apiParicipationCompetitionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiParicipationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Participation>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiParicipationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParicipationApi.apiParicipationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiParicipationPost(body?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiParicipationPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ParicipationApi.apiParicipationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ParicipationApi - factory interface
 * @export
 */
export const ParicipationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ParicipationApiFp(configuration)
    return {
        /**
         * 
         * @param {number} competitionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiParicipationCompetitionIdGet(competitionId: number, options?: RawAxiosRequestConfig): AxiosPromise<Participation> {
            return localVarFp.apiParicipationCompetitionIdGet(competitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiParicipationGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Participation>> {
            return localVarFp.apiParicipationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiParicipationPost(body?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiParicipationPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParicipationApi - object-oriented interface
 * @export
 * @class ParicipationApi
 * @extends {BaseAPI}
 */
export class ParicipationApi extends BaseAPI {
    /**
     * 
     * @param {number} competitionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParicipationApi
     */
    public apiParicipationCompetitionIdGet(competitionId: number, options?: RawAxiosRequestConfig) {
        return ParicipationApiFp(this.configuration).apiParicipationCompetitionIdGet(competitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParicipationApi
     */
    public apiParicipationGet(options?: RawAxiosRequestConfig) {
        return ParicipationApiFp(this.configuration).apiParicipationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParicipationApi
     */
    public apiParicipationPost(body?: number, options?: RawAxiosRequestConfig) {
        return ParicipationApiFp(this.configuration).apiParicipationPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProblemApi - axios parameter creator
 * @export
 */
export const ProblemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Problem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProblemIdDelete', 'id', id)
            const localVarPath = `/api/Problem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProblemIdGet', 'id', id)
            const localVarPath = `/api/Problem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Problem} [problem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemIdPut: async (id: number, problem?: Problem, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProblemIdPut', 'id', id)
            const localVarPath = `/api/Problem/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(problem, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProblemViewModel} [problemViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemPost: async (problemViewModel?: ProblemViewModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Problem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(problemViewModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [groupTaskId] 
         * @param {number} [problemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemSubmittionGet: async (groupTaskId?: number, problemId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Problem/Submittion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (groupTaskId !== undefined) {
                localVarQueryParameter['groupTaskId'] = groupTaskId;
            }

            if (problemId !== undefined) {
                localVarQueryParameter['problemId'] = problemId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PostProblemSubmittionDTO} [postProblemSubmittionDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemsSubmittionPost: async (postProblemSubmittionDTO?: PostProblemSubmittionDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Problems/Submittion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postProblemSubmittionDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProblemApi - functional programming interface
 * @export
 */
export const ProblemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProblemApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProblemGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Problem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProblemGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProblemApi.apiProblemGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProblemIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProblemIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProblemApi.apiProblemIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProblemIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Problem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProblemIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProblemApi.apiProblemIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Problem} [problem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProblemIdPut(id: number, problem?: Problem, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProblemIdPut(id, problem, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProblemApi.apiProblemIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ProblemViewModel} [problemViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProblemPost(problemViewModel?: ProblemViewModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Problem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProblemPost(problemViewModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProblemApi.apiProblemPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [groupTaskId] 
         * @param {number} [problemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProblemSubmittionGet(groupTaskId?: number, problemId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProblemSubmittion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProblemSubmittionGet(groupTaskId, problemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProblemApi.apiProblemSubmittionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PostProblemSubmittionDTO} [postProblemSubmittionDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProblemsSubmittionPost(postProblemSubmittionDTO?: PostProblemSubmittionDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProblemSubmittion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProblemsSubmittionPost(postProblemSubmittionDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProblemApi.apiProblemsSubmittionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProblemApi - factory interface
 * @export
 */
export const ProblemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProblemApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Problem>> {
            return localVarFp.apiProblemGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProblemIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Problem> {
            return localVarFp.apiProblemIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Problem} [problem] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemIdPut(id: number, problem?: Problem, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiProblemIdPut(id, problem, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProblemViewModel} [problemViewModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemPost(problemViewModel?: ProblemViewModel, options?: RawAxiosRequestConfig): AxiosPromise<Problem> {
            return localVarFp.apiProblemPost(problemViewModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [groupTaskId] 
         * @param {number} [problemId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemSubmittionGet(groupTaskId?: number, problemId?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProblemSubmittion>> {
            return localVarFp.apiProblemSubmittionGet(groupTaskId, problemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PostProblemSubmittionDTO} [postProblemSubmittionDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProblemsSubmittionPost(postProblemSubmittionDTO?: PostProblemSubmittionDTO, options?: RawAxiosRequestConfig): AxiosPromise<ProblemSubmittion> {
            return localVarFp.apiProblemsSubmittionPost(postProblemSubmittionDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProblemApi - object-oriented interface
 * @export
 * @class ProblemApi
 * @extends {BaseAPI}
 */
export class ProblemApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemApi
     */
    public apiProblemGet(options?: RawAxiosRequestConfig) {
        return ProblemApiFp(this.configuration).apiProblemGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemApi
     */
    public apiProblemIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return ProblemApiFp(this.configuration).apiProblemIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemApi
     */
    public apiProblemIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ProblemApiFp(this.configuration).apiProblemIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Problem} [problem] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemApi
     */
    public apiProblemIdPut(id: number, problem?: Problem, options?: RawAxiosRequestConfig) {
        return ProblemApiFp(this.configuration).apiProblemIdPut(id, problem, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProblemViewModel} [problemViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemApi
     */
    public apiProblemPost(problemViewModel?: ProblemViewModel, options?: RawAxiosRequestConfig) {
        return ProblemApiFp(this.configuration).apiProblemPost(problemViewModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [groupTaskId] 
     * @param {number} [problemId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemApi
     */
    public apiProblemSubmittionGet(groupTaskId?: number, problemId?: number, options?: RawAxiosRequestConfig) {
        return ProblemApiFp(this.configuration).apiProblemSubmittionGet(groupTaskId, problemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PostProblemSubmittionDTO} [postProblemSubmittionDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemApi
     */
    public apiProblemsSubmittionPost(postProblemSubmittionDTO?: PostProblemSubmittionDTO, options?: RawAxiosRequestConfig) {
        return ProblemApiFp(this.configuration).apiProblemsSubmittionPost(postProblemSubmittionDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuestionContollerApi - axios parameter creator
 * @export
 */
export const QuestionContollerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/QuestionContoller`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuestionContollerIdDelete', 'id', id)
            const localVarPath = `/api/QuestionContoller/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuestionContollerIdGet', 'id', id)
            const localVarPath = `/api/QuestionContoller/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Question} [question] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerIdPut: async (id: number, question?: Question, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuestionContollerIdPut', 'id', id)
            const localVarPath = `/api/QuestionContoller/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(question, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} questionId 
         * @param {CreateQuestionWithAnswersDto} [createQuestionWithAnswersDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerQuestionIdPatch: async (questionId: number, createQuestionWithAnswersDto?: CreateQuestionWithAnswersDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionId' is not null or undefined
            assertParamExists('apiQuestionContollerQuestionIdPatch', 'questionId', questionId)
            const localVarPath = `/api/QuestionContoller/{QuestionId}`
                .replace(`{${"QuestionId"}}`, encodeURIComponent(String(questionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuestionWithAnswersDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} quizId 
         * @param {CreateQuestionWithAnswersDto} [createQuestionWithAnswersDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerQuizIdPost: async (quizId: number, createQuestionWithAnswersDto?: CreateQuestionWithAnswersDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('apiQuestionContollerQuizIdPost', 'quizId', quizId)
            const localVarPath = `/api/QuestionContoller/{QuizId}`
                .replace(`{${"QuizId"}}`, encodeURIComponent(String(quizId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuestionWithAnswersDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionContollerApi - functional programming interface
 * @export
 */
export const QuestionContollerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuestionContollerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionContollerGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Question>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionContollerGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionContollerApi.apiQuestionContollerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionContollerIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionContollerIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionContollerApi.apiQuestionContollerIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionContollerIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionContollerIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionContollerApi.apiQuestionContollerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Question} [question] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionContollerIdPut(id: number, question?: Question, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionContollerIdPut(id, question, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionContollerApi.apiQuestionContollerIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} questionId 
         * @param {CreateQuestionWithAnswersDto} [createQuestionWithAnswersDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionContollerQuestionIdPatch(questionId: number, createQuestionWithAnswersDto?: CreateQuestionWithAnswersDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionContollerQuestionIdPatch(questionId, createQuestionWithAnswersDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionContollerApi.apiQuestionContollerQuestionIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} quizId 
         * @param {CreateQuestionWithAnswersDto} [createQuestionWithAnswersDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuestionContollerQuizIdPost(quizId: number, createQuestionWithAnswersDto?: CreateQuestionWithAnswersDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuestionContollerQuizIdPost(quizId, createQuestionWithAnswersDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuestionContollerApi.apiQuestionContollerQuizIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuestionContollerApi - factory interface
 * @export
 */
export const QuestionContollerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuestionContollerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Question>> {
            return localVarFp.apiQuestionContollerGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiQuestionContollerIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Question> {
            return localVarFp.apiQuestionContollerIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Question} [question] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerIdPut(id: number, question?: Question, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiQuestionContollerIdPut(id, question, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} questionId 
         * @param {CreateQuestionWithAnswersDto} [createQuestionWithAnswersDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerQuestionIdPatch(questionId: number, createQuestionWithAnswersDto?: CreateQuestionWithAnswersDto, options?: RawAxiosRequestConfig): AxiosPromise<Question> {
            return localVarFp.apiQuestionContollerQuestionIdPatch(questionId, createQuestionWithAnswersDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} quizId 
         * @param {CreateQuestionWithAnswersDto} [createQuestionWithAnswersDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuestionContollerQuizIdPost(quizId: number, createQuestionWithAnswersDto?: CreateQuestionWithAnswersDto, options?: RawAxiosRequestConfig): AxiosPromise<Question> {
            return localVarFp.apiQuestionContollerQuizIdPost(quizId, createQuestionWithAnswersDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuestionContollerApi - object-oriented interface
 * @export
 * @class QuestionContollerApi
 * @extends {BaseAPI}
 */
export class QuestionContollerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionContollerApi
     */
    public apiQuestionContollerGet(options?: RawAxiosRequestConfig) {
        return QuestionContollerApiFp(this.configuration).apiQuestionContollerGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionContollerApi
     */
    public apiQuestionContollerIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return QuestionContollerApiFp(this.configuration).apiQuestionContollerIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionContollerApi
     */
    public apiQuestionContollerIdGet(id: number, options?: RawAxiosRequestConfig) {
        return QuestionContollerApiFp(this.configuration).apiQuestionContollerIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Question} [question] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionContollerApi
     */
    public apiQuestionContollerIdPut(id: number, question?: Question, options?: RawAxiosRequestConfig) {
        return QuestionContollerApiFp(this.configuration).apiQuestionContollerIdPut(id, question, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} questionId 
     * @param {CreateQuestionWithAnswersDto} [createQuestionWithAnswersDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionContollerApi
     */
    public apiQuestionContollerQuestionIdPatch(questionId: number, createQuestionWithAnswersDto?: CreateQuestionWithAnswersDto, options?: RawAxiosRequestConfig) {
        return QuestionContollerApiFp(this.configuration).apiQuestionContollerQuestionIdPatch(questionId, createQuestionWithAnswersDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} quizId 
     * @param {CreateQuestionWithAnswersDto} [createQuestionWithAnswersDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionContollerApi
     */
    public apiQuestionContollerQuizIdPost(quizId: number, createQuestionWithAnswersDto?: CreateQuestionWithAnswersDto, options?: RawAxiosRequestConfig) {
        return QuestionContollerApiFp(this.configuration).apiQuestionContollerQuizIdPost(quizId, createQuestionWithAnswersDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * QuizApi - axios parameter creator
 * @export
 */
export const QuizApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Quiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuizIdDelete', 'id', id)
            const localVarPath = `/api/Quiz/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuizIdGet', 'id', id)
            const localVarPath = `/api/Quiz/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateQuizTitle} [updateQuizTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizIdPatch: async (id: number, updateQuizTitle?: UpdateQuizTitle, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuizIdPatch', 'id', id)
            const localVarPath = `/api/Quiz/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateQuizTitle, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Quiz} [quiz] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizIdPut: async (id: number, quiz?: Quiz, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuizIdPut', 'id', id)
            const localVarPath = `/api/Quiz/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quiz, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateQuizDto} [createQuizDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizPost: async (createQuizDto?: CreateQuizDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Quiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuizDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateQuizTaskDto} [createQuizTaskDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizQuizTaskPost: async (createQuizTaskDto?: CreateQuizTaskDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Quiz/QuizTask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuizTaskDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizSelectIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuizSelectIdGet', 'id', id)
            const localVarPath = `/api/Quiz/select/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuizVerificationRequest} [quizVerificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizVerifyPost: async (quizVerificationRequest?: QuizVerificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Quiz/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quizVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizWithoutAnswersIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiQuizWithoutAnswersIdGet', 'id', id)
            const localVarPath = `/api/Quiz/WithoutAnswers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuizApi - functional programming interface
 * @export
 */
export const QuizApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QuizApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Quiz>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quiz>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateQuizTitle} [updateQuizTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizIdPatch(id: number, updateQuizTitle?: UpdateQuizTitle, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizIdPatch(id, updateQuizTitle, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Quiz} [quiz] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizIdPut(id: number, quiz?: Quiz, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizIdPut(id, quiz, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateQuizDto} [createQuizDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizPost(createQuizDto?: CreateQuizDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quiz>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizPost(createQuizDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateQuizTaskDto} [createQuizTaskDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizQuizTaskPost(createQuizTaskDto?: CreateQuizTaskDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizQuizTaskPost(createQuizTaskDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizQuizTaskPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizSelectIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Quiz>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizSelectIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizSelectIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuizVerificationRequest} [quizVerificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizVerifyPost(quizVerificationRequest?: QuizVerificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizVerifyPost(quizVerificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiQuizWithoutAnswersIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quiz>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiQuizWithoutAnswersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QuizApi.apiQuizWithoutAnswersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QuizApi - factory interface
 * @export
 */
export const QuizApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QuizApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Quiz>> {
            return localVarFp.apiQuizGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiQuizIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Quiz> {
            return localVarFp.apiQuizIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {UpdateQuizTitle} [updateQuizTitle] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizIdPatch(id: number, updateQuizTitle?: UpdateQuizTitle, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiQuizIdPatch(id, updateQuizTitle, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Quiz} [quiz] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizIdPut(id: number, quiz?: Quiz, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiQuizIdPut(id, quiz, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateQuizDto} [createQuizDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizPost(createQuizDto?: CreateQuizDto, options?: RawAxiosRequestConfig): AxiosPromise<Quiz> {
            return localVarFp.apiQuizPost(createQuizDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateQuizTaskDto} [createQuizTaskDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizQuizTaskPost(createQuizTaskDto?: CreateQuizTaskDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiQuizQuizTaskPost(createQuizTaskDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizSelectIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Quiz>> {
            return localVarFp.apiQuizSelectIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QuizVerificationRequest} [quizVerificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizVerifyPost(quizVerificationRequest?: QuizVerificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.apiQuizVerifyPost(quizVerificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQuizWithoutAnswersIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Quiz> {
            return localVarFp.apiQuizWithoutAnswersIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QuizApi - object-oriented interface
 * @export
 * @class QuizApi
 * @extends {BaseAPI}
 */
export class QuizApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizGet(options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizIdGet(id: number, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {UpdateQuizTitle} [updateQuizTitle] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizIdPatch(id: number, updateQuizTitle?: UpdateQuizTitle, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizIdPatch(id, updateQuizTitle, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Quiz} [quiz] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizIdPut(id: number, quiz?: Quiz, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizIdPut(id, quiz, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateQuizDto} [createQuizDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizPost(createQuizDto?: CreateQuizDto, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizPost(createQuizDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateQuizTaskDto} [createQuizTaskDto] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizQuizTaskPost(createQuizTaskDto?: CreateQuizTaskDto, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizQuizTaskPost(createQuizTaskDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizSelectIdGet(id: number, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizSelectIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QuizVerificationRequest} [quizVerificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizVerifyPost(quizVerificationRequest?: QuizVerificationRequest, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizVerifyPost(quizVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuizApi
     */
    public apiQuizWithoutAnswersIdGet(id: number, options?: RawAxiosRequestConfig) {
        return QuizApiFp(this.configuration).apiQuizWithoutAnswersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTaskIdDelete', 'id', id)
            const localVarPath = `/api/Task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTaskIdGet', 'id', id)
            const localVarPath = `/api/Task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {GroupTask} [groupTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskIdPut: async (id: number, groupTask?: GroupTask, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTaskIdPut', 'id', id)
            const localVarPath = `/api/Task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupTask, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateGroupTaskDTO} [createGroupTaskDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskPost: async (createGroupTaskDTO?: CreateGroupTaskDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupTaskDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<object>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskQuizDelete: async (requestBody?: Array<object>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Task/Quiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskQuizGet: async (taskId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Task/Quiz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (taskId !== undefined) {
                localVarQueryParameter['taskId'] = taskId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskViewGradeIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTaskViewGradeIdGet', 'id', id)
            const localVarPath = `/api/Task/view-grade/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaskGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaskGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.apiTaskGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaskIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaskIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.apiTaskIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaskIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaskIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.apiTaskIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {GroupTask} [groupTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaskIdPut(id: number, groupTask?: GroupTask, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaskIdPut(id, groupTask, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.apiTaskIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateGroupTaskDTO} [createGroupTaskDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaskPost(createGroupTaskDTO?: CreateGroupTaskDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaskPost(createGroupTaskDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.apiTaskPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Array<object>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaskQuizDelete(requestBody?: Array<object>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaskQuizDelete(requestBody, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.apiTaskQuizDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaskQuizGet(taskId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetGroupTaskQuiz>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaskQuizGet(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.apiTaskQuizGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTaskViewGradeIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTaskViewGradeIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TaskApi.apiTaskViewGradeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<GroupTask>> {
            return localVarFp.apiTaskGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTaskIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<GroupTask>> {
            return localVarFp.apiTaskIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {GroupTask} [groupTask] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskIdPut(id: number, groupTask?: GroupTask, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTaskIdPut(id, groupTask, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateGroupTaskDTO} [createGroupTaskDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskPost(createGroupTaskDTO?: CreateGroupTaskDTO, options?: RawAxiosRequestConfig): AxiosPromise<GroupTask> {
            return localVarFp.apiTaskPost(createGroupTaskDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<object>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskQuizDelete(requestBody?: Array<object>, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTaskQuizDelete(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [taskId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskQuizGet(taskId?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetGroupTaskQuiz> {
            return localVarFp.apiTaskQuizGet(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTaskViewGradeIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<any>> {
            return localVarFp.apiTaskViewGradeIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiTaskGet(options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).apiTaskGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiTaskIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).apiTaskIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiTaskIdGet(id: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).apiTaskIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {GroupTask} [groupTask] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiTaskIdPut(id: number, groupTask?: GroupTask, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).apiTaskIdPut(id, groupTask, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateGroupTaskDTO} [createGroupTaskDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiTaskPost(createGroupTaskDTO?: CreateGroupTaskDTO, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).apiTaskPost(createGroupTaskDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<object>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiTaskQuizDelete(requestBody?: Array<object>, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).apiTaskQuizDelete(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [taskId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiTaskQuizGet(taskId?: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).apiTaskQuizGet(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public apiTaskViewGradeIdGet(id: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).apiTaskViewGradeIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TokenModel} [tokenModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenRefreshTokenPost: async (tokenModel?: TokenModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Token/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TokenModel} [tokenModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTokenRefreshTokenPost(tokenModel?: TokenModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTokenRefreshTokenPost(tokenModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TokenApi.apiTokenRefreshTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenApiFp(configuration)
    return {
        /**
         * 
         * @param {TokenModel} [tokenModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTokenRefreshTokenPost(tokenModel?: TokenModel, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiTokenRefreshTokenPost(tokenModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokenApi - object-oriented interface
 * @export
 * @class TokenApi
 * @extends {BaseAPI}
 */
export class TokenApi extends BaseAPI {
    /**
     * 
     * @param {TokenModel} [tokenModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public apiTokenRefreshTokenPost(tokenModel?: TokenModel, options?: RawAxiosRequestConfig) {
        return TokenApiFp(this.configuration).apiTokenRefreshTokenPost(tokenModel, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [userRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet: async (userRole?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userRole !== undefined) {
                localVarQueryParameter['userRole'] = userRole;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdDelete', 'id', id)
            const localVarPath = `/api/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdGet', 'id', id)
            const localVarPath = `/api/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdPut: async (id: number, group?: Group, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdPut', 'id', id)
            const localVarPath = `/api/Users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(group, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateGroupDTO} [createGroupDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost: async (createGroupDTO?: CreateGroupDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createGroupDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [userRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGet(userRole?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGet(userRole, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdPut(id: number, group?: Group, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdPut(id, group, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateGroupDTO} [createGroupDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPost(createGroupDTO?: CreateGroupDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPost(createGroupDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [userRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(userRole?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserInfo>> {
            return localVarFp.apiUsersGet(userRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
            return localVarFp.apiUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Group} [group] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdPut(id: number, group?: Group, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiUsersIdPut(id, group, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateGroupDTO} [createGroupDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(createGroupDTO?: CreateGroupDTO, options?: RawAxiosRequestConfig): AxiosPromise<Group> {
            return localVarFp.apiUsersPost(createGroupDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {string} [userRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersGet(userRole?: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersGet(userRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersIdGet(id: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Group} [group] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersIdPut(id: number, group?: Group, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersIdPut(id, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateGroupDTO} [createGroupDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersPost(createGroupDTO?: CreateGroupDTO, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersPost(createGroupDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



